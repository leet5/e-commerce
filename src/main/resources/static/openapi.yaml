openapi: 3.0.3
info:
    title: E-commerce API
    description: API for managing e-commerce business logic
    version: 0.0.1
paths:
    /customers:
        get:
            summary: Retrieve all customers with pagination
            operationId: getAllCustomers
            tags:
                - Customer
            parameters:
                -   $ref: '#/components/parameters/ApiVersionHeader'
                -   $ref: '#/components/parameters/PageNumber'
                -   $ref: '#/components/parameters/PageSize'
            responses:
                '200':
                    description: Successful response with paginated list of customers
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/CustomerDTO'
                '400':
                    description: Invalid parameters supplied
                '500':
                    description: Internal server error
        post:
            summary: Create a new customer
            operationId: createCustomer
            tags:
                - Customer
            parameters:
                -   $ref: '#/components/parameters/ApiVersionHeader'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CustomerDTO'
            responses:
                '201':
                    description: Created. Returns the created customer details.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CustomerDTO'
                    headers:
                        Location:
                            description: The URL of the newly created customer resource.
                            schema:
                                type: string
                                format: uri
                                example: /customers/{id}
                '400':
                    description: Invalid API version supplied
                '500':
                    description: Internal server error
    /customers/{customerId}:
        get:
            summary: Get a customer by ID
            description: Returns a single customer
            operationId: getCustomerById
            tags:
                - Customer
            parameters:
                -   $ref: '#/components/parameters/ApiVersionHeader'
                -   $ref: '#/components/parameters/CustomerID'
            responses:
                '200':
                    description: Found the customer
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CustomerDTO'
                '400':
                    description: Invalid API version or ID supplied
                '404':
                    description: Customer not found
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/NotFoundExceptionDTO'
                '500':
                    description: Internal server error
        delete:
            summary: Delete a customer by ID
            description: Deletes customer if it present in the system
            operationId: deleteCustomerById
            tags:
                - Customer
            parameters:
                -   $ref: '#/components/parameters/ApiVersionHeader'
                -   $ref: '#/components/parameters/CustomerID'
            responses:
                '204':
                    description: Customer deleted successfully
                '400':
                    description: Invalid API version or ID supplied
                '404':
                    description: Customer not found
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/NotFoundExceptionDTO'
                '500':
                    description: Internal server error
        put:
            summary: Replace customer by ID
            description: Fetch customer by ID and replace old fields with new
            operationId: replaceCustomerById
            tags:
                - Customer
            parameters:
                -   $ref: '#/components/parameters/ApiVersionHeader'
                -   $ref: '#/components/parameters/CustomerID'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CustomerDTO'
            responses:
                '200':
                    description: Customer replaced successfully
                '400':
                    description: Invalid API version or ID supplied
                '404':
                    description: Customer not found
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/NotFoundExceptionDTO'
                '500':
                    description: Internal server error
    /customers/{customerId}/orders:
        get:
            summary: Retrieve all orders with pagination
            operationId: getAllOrders
            tags:
                - Order
            parameters:
                -   $ref: "#/components/parameters/CustomerID"
                -   $ref: '#/components/parameters/ApiVersionHeader'
                -   $ref: '#/components/parameters/PageNumber'
                -   $ref: '#/components/parameters/PageSize'
            responses:
                '200':
                    description: Successful response with paginated list of orders
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/OrderDTO'
                '400':
                    description: Invalid parameters supplied
                '500':
                    description: Internal server error
        post:
            summary: Place an Order
            operationId: placeOrder
            tags:
                - Order
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: array
                            items:
                                $ref: "#/components/schemas/OrderItemRequest"
            parameters:
                -   $ref: "#/components/parameters/CustomerID"
                -   $ref: "#/components/parameters/ApiVersionHeader"
            responses:
                '201':
                    description: Order placed successfully.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/OrderDTO'
                '400':
                    description: Invalid request format or parameters.
                '500':
                    description: Internal server error.
    /customers/{customerId}/orders/{orderId}:
        get:
            summary: Get an order by ID
            description: Returns a single order
            operationId: getOrderById
            tags:
                - Order
            parameters:
                -   $ref: "#/components/parameters/ApiVersionHeader"
                -   $ref: "#/components/parameters/CustomerID"
                -   $ref: "#/components/parameters/OrderID"
            responses:
                '200':
                    description: Found the order
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/OrderDTO'
                '400':
                    description: Invalid API version or ID supplied
                '404':
                    description: Order not found
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/NotFoundExceptionDTO'
                '500':
                    description: Internal server error
        delete:
            summary: Delete an order by ID
            description: Deletes an order if it present in the system
            operationId: deleteOrderById
            tags:
                - Order
            parameters:
                -   $ref: '#/components/parameters/ApiVersionHeader'
                -   $ref: '#/components/parameters/CustomerID'
                -   $ref: '#/components/parameters/OrderID'
            responses:
                '204':
                    description: Order deleted successfully
                '400':
                    description: Invalid API version or ID supplied
                '404':
                    description: Order not found
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/NotFoundExceptionDTO'
                '500':
                    description: Internal server error
        put:
            summary: Replace an order by ID
            description: Fetch an order by ID and replace old fields with new
            operationId: replaceOrderById
            tags:
                - Order
            parameters:
                -   $ref: '#/components/parameters/ApiVersionHeader'
                -   $ref: '#/components/parameters/CustomerID'
                -   $ref: '#/components/parameters/OrderID'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/OrderDTO'
            responses:
                '200':
                    description: Order replaced successfully
                '400':
                    description: Invalid API version or ID supplied
                '404':
                    description: Order not found
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/OrderDTO'
                '500':
                    description: Internal server error
    /customers/{customerId}/orders/{orderId}/payments:
        post:
            summary: Process payment
            description: Processes payment for particular order
            operationId: processPayment
            tags:
                - Payment
            parameters:
                -   $ref: "#/components/parameters/ApiVersionHeader"
                -   $ref: "#/components/parameters/CustomerID"
                -   $ref: "#/components/parameters/OrderID"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PaymentMethod'
            responses:
                '200':
                    description: Created. Returns the created Payment details.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Payment"
                '400':
                    description: Invalid API version or ID supplied
                '404':
                    description: Order not found
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/NotFoundExceptionDTO'
                '500':
                    description: Internal server error
    /backups:
        get:
            summary: Trigger Manual Backup
            operationId: manualBackup
            tags:
                - Backup
            parameters:
                -   $ref: "#/components/parameters/ApiVersionHeader"
            responses:
                '200':
                    description: Backup completed successfully.
                    content:
                        text/plain:
                            schema:
                                type: string
                                example: Backup complete.
                '400':
                    description: Invalid API version provided.
                '500':
                    description: Internal server error.
components:
    schemas:
        CustomerDTO:
            type: object
            properties:
                id:
                    type: integer
                    format: int64
                firstName:
                    type: string
                lastName:
                    type: string
                email:
                    type: string
                    uniqueItems: true
                birthdate:
                    type: string
                    format: date
                orders:
                    type: array
                    items:
                        type: integer
                        format: int64
        OrderDTO:
            type: object
            properties:
                id:
                    type: integer
                    format: int64
                customerId:
                    type: integer
                    format: int64
                items:
                    type: array
                    items:
                        type: integer
                orderDateTime:
                    type: string
                    format: date-time
                    example: "2024-06-23T10:15:30Z"
                totalAmount:
                    type: number
                    format: double
                paymentId:
                    type: integer
                    format: int64
                shipmentId:
                    type: integer
                    format: int64
            required:
                - items
                - orderDateTime
                - totalAmount
        OrderItemRequest:
            type: object
            properties:
                productId:
                    type: integer
                    format: int64
                quantity:
                    type: integer
                    format: int32
            required:
                - productId
                - quantity
        PaymentRequest:
            type: object
            properties:
                id:
                    type: integer
                    format: int64
                paymentMethod:
                    $ref: '#/components/schemas/PaymentMethod'
            required:
                - id
                - paymentMethod
        PaymentMethod:
            type: string
            enum:
                - CREDIT_CARD
                - DEBIT_CARD
                - PAYPAL
                - BANK_TRANSFER
                - CASH
            description: Payment method types
            example: CREDIT_CARD
        Payment:
            type: object
            properties:
                id:
                    type: integer
                    format: int64
                    description: Unique identifier for the payment.
                amount:
                    type: number
                    format: BigDecimal
                    description: The amount of the payment.
                paymentDateTime:
                    type: string
                    format: date-time
                    description: Date and time of the payment.
                paymentMethod:
                    $ref: '#/components/schemas/PaymentMethod'
            required:
                - amount
                - paymentDateTime
                - paymentMethod
        NotFoundExceptionDTO:
            type: object
            properties:
                error:
                    type: string
                    example: "Customer not found"
                message:
                    type: string
                    example: "Customer with ID 123 not found"
    parameters:
        ApiVersionHeader:
            name: api-version
            in: header
            required: true
            schema:
                type: string
            description: API version header
        CustomerID:
            name: Customer ID
            in: path
            required: true
            schema:
                type: integer
                format: int64
            description: ID of the customer
        OrderID:
            name: Order ID
            in: path
            required: true
            schema:
                type: integer
                format: int64
            description: ID of the order
        PageNumber:
            name: page
            in: query
            description: Page number (starts from 0)
            required: false
            schema:
                type: integer
                minimum: 0
                default: 0
        PageSize:
            name: size
            in: query
            description: Number of items per page
            required: false
            schema:
                type: integer
                minimum: 1
                maximum: 100
                default: 20